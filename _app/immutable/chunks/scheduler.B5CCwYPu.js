function k(){}function x(t,n){for(const e in n)t[e]=n[e];return t}function w(t){return t()}function M(){return Object.create(null)}function j(t){t.forEach(w)}function U(t){return typeof t=="function"}function A(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function B(t){return Object.keys(t).length===0}function E(t,...n){if(t==null){for(const o of n)o(void 0);return k}const e=t.subscribe(...n);return e.unsubscribe?()=>e.unsubscribe():e}function C(t,n,e){t.$$.on_destroy.push(E(n,e))}function D(t,n,e,o){if(t){const c=y(t,n,e,o);return t[0](c)}}function y(t,n,e,o){return t[1]&&o?x(e.ctx.slice(),t[1](o(n))):e.ctx}function F(t,n,e,o){if(t[2]&&o){const c=t[2](o(e));if(n.dirty===void 0)return c;if(typeof c=="object"){const l=[],d=Math.max(n.dirty.length,c.length);for(let u=0;u<d;u+=1)l[u]=n.dirty[u]|c[u];return l}return n.dirty|c}return n.dirty}function P(t,n,e,o,c,l){if(c){const d=y(n,e,o,l);t.p(d,c)}}function S(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let o=0;o<e;o++)n[o]=-1;return n}return-1}function G(t){const n={};for(const e in t)e[0]!=="$"&&(n[e]=t[e]);return n}let i;function _(t){i=t}function f(){if(!i)throw new Error("Function called outside component initialization");return i}function H(t){f().$$.before_update.push(t)}function I(t){f().$$.on_mount.push(t)}function J(t){f().$$.after_update.push(t)}function K(t){f().$$.on_destroy.push(t)}function L(t,n){const e=t.$$.callbacks[n.type];e&&e.slice().forEach(o=>o.call(this,n))}const a=[],g=[];let r=[];const p=[],m=Promise.resolve();let b=!1;function v(){b||(b=!0,m.then(q))}function N(){return v(),m}function O(t){r.push(t)}function Q(t){p.push(t)}const h=new Set;let s=0;function q(){if(s!==0)return;const t=i;do{try{for(;s<a.length;){const n=a[s];s++,_(n),z(n.$$)}}catch(n){throw a.length=0,s=0,n}for(_(null),a.length=0,s=0;g.length;)g.pop()();for(let n=0;n<r.length;n+=1){const e=r[n];h.has(e)||(h.add(e),e())}r.length=0}while(a.length);for(;p.length;)p.pop()();b=!1,h.clear(),_(t)}function z(t){if(t.fragment!==null){t.update(),j(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(O)}}function R(t){const n=[],e=[];r.forEach(o=>t.indexOf(o)===-1?n.push(o):e.push(o)),e.forEach(o=>o()),r=n}export{G as A,Q as B,H as C,F as a,C as b,D as c,J as d,g as e,M as f,S as g,q as h,U as i,B as j,O as k,R as l,i as m,k as n,I as o,_ as p,w as q,j as r,A as s,N as t,P as u,a as v,v as w,K as x,L as y,x as z};
